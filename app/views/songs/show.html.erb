<h2>Trainer for <%=@song.name%></h2>

<div id="player"></div>

<script>
  // 2. This code loads the IFrame Player API code asynchronously.
  var tag = document.createElement('script');
  tag.src = "http://www.youtube.com/player_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // 3. This function creates an <iframe> (and YouTube player)
  //    after the API code downloads.
  var player;
  function onYouTubePlayerAPIReady() {
    player = new YT.Player('player', {
      height: '390',
      width: '640',
      videoId: '<%=@song.url%>',
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      }
    });
  }

  // 4. The API will call this function when the video player is ready.
  function onPlayerReady(event) {
    event.target.playVideo();
  }

  // 5. The API calls this function when the player's state changes.
  //    The function indicates that when playing a video (state=1),
  //    the player should play for six seconds and then stop.
  var done = false;
  function onPlayerStateChange(event) {
    if (event.data == YT.PlayerState.PLAYING && !done) {
      done = true;
    }
  }

  function pauseVideo() {
    player.pauseVideo();
  }

  function seekTo(time) {
    player.seekTo(time, true);
  }
</script>

<script type='text/javascript'>
  gRegions = [];
  <% @song.regions.each do |region| %>
  gRegions.push({id:<%=region.id%>, start:<%=region.start || 0.0%>, end:<%=region.end || 0.0%>});  
  <% end %>

  gCurrentRegion = -1; // whole song

  gPaused = false;

  function loopRegion() {
    if (gCurrentRegion != -1) {
      if (player.getCurrentTime() > gRegions[gCurrentRegion].end) {
        player.pauseVideo();
        setTimeout(playCurrentRegion, 1000)
      } else if (!gPaused) {
        setTimeout(loopRegion, 500);
      }
    }
  }

  function playCurrentRegion() {
    if (gCurrentRegion == -1) {
      player.seekTo(0, true);
    } else {
      player.seekTo(gRegions[gCurrentRegion].start);
      setTimeout(loopRegion, 500)
    }
    player.playVideo();
  }

  function skipToNextRegion() {
    if (gRegions.length == 0) { return; }
    else {
      gCurrentRegion = (gCurrentRegion + 1) % gRegions.length;
    }
    playCurrentRegion();
  }

  function breakFromRegions() {
    gCurrentRegion = -1;
  }

  gStartTime = 0.0;
  gEndTime = 0.0;
  function startNewRegion() {
    gStartTime = player.getCurrentTime();
  } 

  function endNewRegion() {
    gEndTime = player.getCurrentTime();
    $.post("/regions", {region:{song_id:<%=@song.id%>, start:gStartTime, end:gEndTime}},
    function(data, status, jq) {
      window.location.reload();
    });
  }
</script>

<a href='javascript:alert(gCurrentRegion);'>Current region</a>
<a href='javascript:alert(player.getCurrentTime());'>Current playertime</a>
<a href='javascript:skipToNextRegion();'>Play next region</a>
<a href='javascript:startNewRegion();'>Start region</a>
<a href='javascript:endNewRegion();'>End region</a>
<a href='javascript:breakFromRegions();'>Break from regions</a>


<ul>
<% @song.regions.each_with_index do |region, id| %>
<li><a href='javascript:seekTo(<%=region.start%>)'>Region #<%=id%></a>
<% end %>
</ul>
